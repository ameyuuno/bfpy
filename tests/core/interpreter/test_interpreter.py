import io
import typing as t

import pytest

from bfpy.core.il.operation import (Operation, CompositeOperation, Addition, RightShift, LeftShift, Subtraction,
                                    WriteByte)
from bfpy.core.interpreter.interpreter import Interpreter
from bfpy.core.io.stream import ByteInputStream, ByteOutputStream


class TestInterpreter:
    @pytest.mark.parametrize("input_bytes, output_bytes", [(io.BytesIO(), io.BytesIO())], indirect=True)
    @pytest.mark.parametrize("operation, expected_output", [
        pytest.param(
            CompositeOperation([
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                CompositeOperation([
                    RightShift(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    RightShift(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    RightShift(1),
                    Addition(1),
                    Addition(1),
                    Addition(1),
                    RightShift(1),
                    Addition(1),
                    LeftShift(1),
                    LeftShift(1),
                    LeftShift(1),
                    LeftShift(1),
                    Subtraction(1),
                ]),
                RightShift(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                RightShift(1),
                Addition(1),
                WriteByte(),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                WriteByte(),
                Addition(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                RightShift(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                LeftShift(1),
                LeftShift(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                RightShift(1),
                WriteByte(),
                Addition(1),
                Addition(1),
                Addition(1),
                WriteByte(),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                WriteByte(),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                Subtraction(1),
                WriteByte(),
                RightShift(1),
                Addition(1),
                WriteByte(),
                RightShift(1),
                WriteByte(),
            ]),
            b"Hello World!\n",
            id="++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.------"
               "--.>+.>."
        ),
    ])
    def test_evaluate_without_read_byte_operations(self, interpreter: Interpreter,
                                                   input_stream: ByteInputStream, output_stream: ByteOutputStream,
                                                   input_bytes: io.BytesIO, output_bytes: io.BytesIO,
                                                   operation: Operation, expected_output: t.ByteString) -> None:
        interpreter.evaluate(input_stream, output_stream, operation)

        assert output_bytes.getvalue() == expected_output
